# coding:gbk

import logging
import datetime
import os
import mmap
import json
import xlrd


def init(ContextInfo):
    """
    日志、 工作路径配置
    """
    ContextInfo.workSpace = r'D:\QuantitativeDatas'
    ContextInfo.stocksPath = ContextInfo.workSpace + os.sep + r'Stocks' + os.sep + datetime.datetime.now().strftime(
        '%Y%m%d')
    ContextInfo.loggingPath = ContextInfo.workSpace + os.sep + r'Logging' + os.sep + datetime.datetime.now().strftime(
        '%Y%m%d')

    if not os.path.exists(ContextInfo.loggingPath):
        os.mkdir(ContextInfo.loggingPath)

    logging.basicConfig(level=logging.DEBUG,
                        format='[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s',
                        datefmt='%H:%M:%S',
                        filename=ContextInfo.loggingPath + os.sep + 'iQuant-' + datetime.datetime.now().strftime(
                            '%Y%m%d%H%M%S') + '.log',
                        filemode='a'
                        )

    logging.warning(
        f'路径配置: root:{ContextInfo.workSpace} \r\nstock: {ContextInfo.stocksPath}\r\nlogging: {ContextInfo.loggingPath}')

    """
    业务参数、数据源相关内容配置
    """
    ContextInfo.recorder = 0
    ContextInfo.recorder_list = []
    ContextInfo.recorderMap = {}  # 用来存储每一支股票的当前tick结果，包括上一tick增量和总增量
    ContextInfo.bigAttack = 300000  # 大额判断标准，主力进攻判断标准
    ContextInfo.attack_threshold = 5000000  # 购入资金达标标准
    ContextInfo.capitalRate = 0.01 * 0.5  # 流通市值比例
    ContextInfo.set_slippage(1, 0.02)  # 按照固定值（价格）设置滑点值为 0.01

    ContextInfo.account = '410001555885'
    ContextInfo.set_account = ContextInfo.account  # 设定资金账号
    ContextInfo.prType = 5  # 下单选价类型
    ContextInfo.modelPrice = 0.8  # 单股、单账号、可用、比例[0 ~ 1]

    ContextInfo.sector_code_list = ['000006.SZ', '000009.SZ', '000011.SZ', '000012.SZ', '000016.SZ', '000019.SZ',
                                    '000021.SZ', '000025.SZ', '000026.SZ', '000027.SZ', '000029.SZ', '000030.SZ',
                                    '000031.SZ', '000032.SZ', '000034.SZ', '000035.SZ', '000036.SZ', '000039.SZ',
                                    '000040.SZ', '000042.SZ', '000045.SZ', '000048.SZ', '000049.SZ', '000050.SZ',
                                    '000055.SZ', '000056.SZ', '000058.SZ', '000059.SZ', '000060.SZ', '000061.SZ',
                                    '000062.SZ', '000065.SZ', '000066.SZ', '000068.SZ', '000069.SZ', '000070.SZ',
                                    '000078.SZ', '000088.SZ', '000089.SZ', '000090.SZ', '000096.SZ', '000099.SZ',
                                    '000151.SZ', '000155.SZ', '000156.SZ', '000157.SZ', '000158.SZ', '000159.SZ',
                                    '000400.SZ', '000401.SZ', '000402.SZ', '000403.SZ', '000404.SZ', '000407.SZ',
                                    '000408.SZ', '000409.SZ', '000411.SZ', '000417.SZ', '000420.SZ', '000422.SZ',
                                    '000425.SZ', '000426.SZ', '000428.SZ', '000429.SZ', '000488.SZ', '000498.SZ',
                                    '000501.SZ', '000503.SZ', '000504.SZ', '000505.SZ', '000506.SZ', '000507.SZ',
                                    '000509.SZ', '000510.SZ', '000513.SZ', '000514.SZ', '000516.SZ', '000517.SZ',
                                    '000519.SZ', '000520.SZ', '000521.SZ', '000523.SZ', '000524.SZ', '000528.SZ',
                                    '000529.SZ', '000531.SZ', '000532.SZ', '000534.SZ', '000537.SZ', '000539.SZ',
                                    '000541.SZ', '000543.SZ', '000544.SZ', '000545.SZ', '000546.SZ', '000547.SZ',
                                    '000550.SZ', '000551.SZ', '000552.SZ', '000553.SZ', '000555.SZ', '000557.SZ',
                                    '000558.SZ', '000559.SZ', '000560.SZ', '000561.SZ', '000563.SZ', '000566.SZ',
                                    '000567.SZ', '000572.SZ', '000576.SZ', '000581.SZ', '000582.SZ', '000584.SZ',
                                    '000589.SZ', '000591.SZ', '000595.SZ', '000597.SZ', '000598.SZ', '000599.SZ',
                                    '000600.SZ', '000601.SZ', '000603.SZ', '000607.SZ', '000610.SZ', '000612.SZ',
                                    '000615.SZ', '000623.SZ', '000626.SZ', '000627.SZ', '000629.SZ', '000630.SZ',
                                    '000631.SZ', '000633.SZ', '000636.SZ', '000639.SZ', '000650.SZ', '000652.SZ',
                                    '000655.SZ', '000657.SZ', '000659.SZ', '000665.SZ', '000670.SZ', '000672.SZ',
                                    '000676.SZ', '000680.SZ', '000681.SZ', '000682.SZ', '000683.SZ', '000685.SZ',
                                    '000686.SZ', '000688.SZ', '000690.SZ', '000695.SZ', '000698.SZ', '000700.SZ',
                                    '000703.SZ', '000707.SZ', '000710.SZ', '000712.SZ', '000713.SZ', '000715.SZ',
                                    '000716.SZ', '000717.SZ', '000718.SZ', '000719.SZ', '000720.SZ', '000721.SZ',
                                    '000722.SZ', '000723.SZ', '000726.SZ', '000728.SZ', '000729.SZ', '000731.SZ',
                                    '000735.SZ', '000736.SZ', '000737.SZ', '000738.SZ', '000739.SZ', '000750.SZ',
                                    '000751.SZ', '000753.SZ', '000755.SZ', '000756.SZ', '000758.SZ', '000761.SZ',
                                    '000762.SZ', '000766.SZ', '000767.SZ', '000777.SZ', '000778.SZ', '000779.SZ',
                                    '000783.SZ', '000785.SZ', '000786.SZ', '000788.SZ', '000789.SZ', '000791.SZ',
                                    '000793.SZ', '000795.SZ', '000797.SZ', '000798.SZ', '000800.SZ', '000801.SZ',
                                    '000802.SZ', '000803.SZ', '000810.SZ', '000811.SZ', '000812.SZ', '000813.SZ',
                                    '000815.SZ', '000816.SZ', '000818.SZ', '000819.SZ', '000821.SZ', '000822.SZ',
                                    '000823.SZ', '000825.SZ', '000826.SZ', '000828.SZ', '000829.SZ', '000830.SZ',
                                    '000831.SZ', '000836.SZ', '000837.SZ', '000838.SZ', '000848.SZ', '000850.SZ',
                                    '000851.SZ', '000852.SZ', '000859.SZ', '000860.SZ', '000862.SZ', '000863.SZ',
                                    '000868.SZ', '000869.SZ', '000875.SZ', '000877.SZ', '000878.SZ', '000881.SZ',
                                    '000883.SZ', '000885.SZ', '000886.SZ', '000887.SZ', '000888.SZ', '000892.SZ',
                                    '000893.SZ', '000898.SZ', '000899.SZ', '000900.SZ', '000901.SZ', '000902.SZ',
                                    '000905.SZ', '000906.SZ', '000909.SZ', '000910.SZ', '000911.SZ', '000912.SZ',
                                    '000913.SZ', '000915.SZ', '000917.SZ', '000919.SZ', '000920.SZ', '000921.SZ',
                                    '000922.SZ', '000923.SZ', '000925.SZ', '000926.SZ', '000927.SZ', '000928.SZ',
                                    '000930.SZ', '000931.SZ', '000932.SZ', '000933.SZ', '000935.SZ', '000936.SZ',
                                    '000937.SZ', '000948.SZ', '000949.SZ', '000950.SZ', '000951.SZ', '000957.SZ',
                                    '000958.SZ', '000959.SZ', '000960.SZ', '000962.SZ', '000965.SZ', '000966.SZ',
                                    '000967.SZ', '000968.SZ', '000969.SZ', '000970.SZ', '000973.SZ', '000975.SZ',
                                    '000976.SZ', '000978.SZ', '000980.SZ', '000983.SZ', '000987.SZ', '000988.SZ',
                                    '000989.SZ', '000990.SZ', '000993.SZ', '000997.SZ', '000998.SZ', '001201.SZ',
                                    '001203.SZ', '001213.SZ', '001330.SZ', '001696.SZ', '001872.SZ', '001896.SZ',
                                    '001914.SZ', '002002.SZ', '002003.SZ', '002004.SZ', '002006.SZ', '002007.SZ',
                                    '002008.SZ', '002009.SZ', '002010.SZ', '002011.SZ', '002014.SZ', '002015.SZ',
                                    '002016.SZ', '002017.SZ', '002019.SZ', '002020.SZ', '002022.SZ', '002023.SZ',
                                    '002026.SZ', '002028.SZ', '002029.SZ', '002030.SZ', '002031.SZ', '002033.SZ',
                                    '002034.SZ', '002035.SZ', '002036.SZ', '002037.SZ', '002038.SZ', '002039.SZ',
                                    '002040.SZ', '002041.SZ', '002042.SZ', '002043.SZ', '002044.SZ', '002045.SZ',
                                    '002046.SZ', '002047.SZ', '002048.SZ', '002051.SZ', '002053.SZ', '002055.SZ',
                                    '002056.SZ', '002057.SZ', '002059.SZ', '002060.SZ', '002061.SZ', '002062.SZ',
                                    '002063.SZ', '002064.SZ', '002065.SZ', '002067.SZ', '002068.SZ', '002073.SZ',
                                    '002074.SZ', '002075.SZ', '002077.SZ', '002078.SZ', '002079.SZ', '002080.SZ',
                                    '002081.SZ', '002083.SZ', '002085.SZ', '002088.SZ', '002090.SZ', '002091.SZ',
                                    '002092.SZ', '002093.SZ', '002095.SZ', '002096.SZ', '002097.SZ', '002099.SZ',
                                    '002100.SZ', '002101.SZ', '002104.SZ', '002106.SZ', '002107.SZ', '002108.SZ',
                                    '002109.SZ', '002110.SZ', '002111.SZ', '002115.SZ', '002116.SZ', '002117.SZ',
                                    '002119.SZ', '002120.SZ', '002121.SZ', '002122.SZ', '002123.SZ', '002124.SZ',
                                    '002125.SZ', '002126.SZ', '002127.SZ', '002128.SZ', '002130.SZ', '002132.SZ',
                                    '002135.SZ', '002138.SZ', '002139.SZ', '002140.SZ', '002141.SZ', '002145.SZ',
                                    '002149.SZ', '002150.SZ', '002151.SZ', '002152.SZ', '002153.SZ', '002154.SZ',
                                    '002155.SZ', '002156.SZ', '002157.SZ', '002158.SZ', '002160.SZ', '002161.SZ',
                                    '002162.SZ', '002163.SZ', '002166.SZ', '002167.SZ', '002168.SZ', '002169.SZ',
                                    '002170.SZ', '002171.SZ', '002174.SZ', '002175.SZ', '002176.SZ', '002181.SZ',
                                    '002182.SZ', '002183.SZ', '002184.SZ', '002185.SZ', '002186.SZ', '002187.SZ',
                                    '002189.SZ', '002190.SZ', '002191.SZ', '002194.SZ', '002195.SZ', '002196.SZ',
                                    '002197.SZ', '002198.SZ', '002201.SZ', '002202.SZ', '002203.SZ', '002204.SZ',
                                    '002206.SZ', '002208.SZ', '002212.SZ', '002213.SZ', '002214.SZ', '002215.SZ',
                                    '002216.SZ', '002217.SZ', '002218.SZ', '002219.SZ', '002221.SZ', '002222.SZ',
                                    '002223.SZ', '002225.SZ', '002226.SZ', '002227.SZ', '002228.SZ', '002229.SZ',
                                    '002232.SZ', '002233.SZ', '002234.SZ', '002235.SZ', '002237.SZ', '002238.SZ',
                                    '002239.SZ', '002240.SZ', '002242.SZ', '002243.SZ', '002244.SZ', '002245.SZ',
                                    '002246.SZ', '002248.SZ', '002249.SZ', '002250.SZ', '002251.SZ', '002252.SZ',
                                    '002253.SZ', '002254.SZ', '002255.SZ', '002258.SZ', '002261.SZ', '002262.SZ',
                                    '002263.SZ', '002264.SZ', '002265.SZ', '002266.SZ', '002267.SZ', '002268.SZ',
                                    '002270.SZ', '002273.SZ', '002274.SZ', '002275.SZ', '002276.SZ', '002277.SZ',
                                    '002279.SZ', '002280.SZ', '002281.SZ', '002282.SZ', '002283.SZ', '002284.SZ',
                                    '002285.SZ', '002286.SZ', '002287.SZ', '002288.SZ', '002291.SZ', '002292.SZ',
                                    '002293.SZ', '002294.SZ', '002297.SZ', '002298.SZ', '002299.SZ', '002300.SZ',
                                    '002301.SZ', '002302.SZ', '002303.SZ', '002306.SZ', '002307.SZ', '002308.SZ',
                                    '002312.SZ', '002314.SZ', '002315.SZ', '002317.SZ', '002318.SZ', '002320.SZ',
                                    '002322.SZ', '002323.SZ', '002324.SZ', '002326.SZ', '002327.SZ', '002328.SZ',
                                    '002329.SZ', '002330.SZ', '002332.SZ', '002334.SZ', '002335.SZ', '002336.SZ',
                                    '002338.SZ', '002339.SZ', '002340.SZ', '002341.SZ', '002342.SZ', '002343.SZ',
                                    '002344.SZ', '002345.SZ', '002346.SZ', '002348.SZ', '002349.SZ', '002350.SZ',
                                    '002351.SZ', '002353.SZ', '002354.SZ', '002356.SZ', '002358.SZ', '002361.SZ',
                                    '002362.SZ', '002364.SZ', '002367.SZ', '002368.SZ', '002372.SZ', '002373.SZ',
                                    '002374.SZ', '002375.SZ', '002376.SZ', '002378.SZ', '002379.SZ', '002382.SZ',
                                    '002383.SZ', '002384.SZ', '002385.SZ', '002386.SZ', '002387.SZ', '002388.SZ',
                                    '002389.SZ', '002390.SZ', '002391.SZ', '002392.SZ', '002393.SZ', '002396.SZ',
                                    '002398.SZ', '002399.SZ', '002400.SZ', '002401.SZ', '002402.SZ', '002405.SZ',
                                    '002407.SZ', '002408.SZ', '002412.SZ', '002413.SZ', '002414.SZ', '002416.SZ',
                                    '002418.SZ', '002419.SZ', '002421.SZ', '002422.SZ', '002423.SZ', '002424.SZ',
                                    '002425.SZ', '002428.SZ', '002429.SZ', '002430.SZ', '002431.SZ', '002432.SZ',
                                    '002434.SZ', '002435.SZ', '002436.SZ', '002438.SZ', '002439.SZ', '002440.SZ',
                                    '002441.SZ', '002443.SZ', '002444.SZ', '002445.SZ', '002446.SZ', '002449.SZ',
                                    '002452.SZ', '002453.SZ', '002454.SZ', '002455.SZ', '002456.SZ', '002458.SZ',
                                    '002461.SZ', '002462.SZ', '002463.SZ', '002465.SZ', '002467.SZ', '002468.SZ',
                                    '002469.SZ', '002472.SZ', '002474.SZ', '002476.SZ', '002478.SZ', '002479.SZ',
                                    '002481.SZ', '002483.SZ', '002484.SZ', '002487.SZ', '002488.SZ', '002489.SZ',
                                    '002491.SZ', '002497.SZ', '002498.SZ', '002500.SZ', '002502.SZ', '002505.SZ',
                                    '002506.SZ', '002507.SZ', '002508.SZ', '002510.SZ', '002511.SZ', '002512.SZ',
                                    '002514.SZ', '002515.SZ', '002516.SZ', '002517.SZ', '002518.SZ', '002519.SZ',
                                    '002520.SZ', '002522.SZ', '002523.SZ', '002524.SZ', '002527.SZ', '002528.SZ',
                                    '002529.SZ', '002530.SZ', '002531.SZ', '002532.SZ', '002533.SZ', '002534.SZ',
                                    '002536.SZ', '002537.SZ', '002538.SZ', '002539.SZ', '002540.SZ', '002541.SZ',
                                    '002542.SZ', '002543.SZ', '002544.SZ', '002545.SZ', '002546.SZ', '002547.SZ',
                                    '002548.SZ', '002549.SZ', '002550.SZ', '002552.SZ', '002555.SZ', '002556.SZ',
                                    '002557.SZ', '002558.SZ', '002559.SZ', '002560.SZ', '002561.SZ', '002562.SZ',
                                    '002563.SZ', '002564.SZ', '002565.SZ', '002567.SZ', '002568.SZ', '002570.SZ',
                                    '002572.SZ', '002573.SZ', '002574.SZ', '002575.SZ', '002577.SZ', '002578.SZ',
                                    '002579.SZ', '002580.SZ', '002581.SZ', '002583.SZ', '002585.SZ', '002587.SZ',
                                    '002588.SZ', '002589.SZ', '002590.SZ', '002595.SZ', '002596.SZ', '002597.SZ',
                                    '002598.SZ', '002600.SZ', '002601.SZ', '002602.SZ', '002603.SZ', '002605.SZ',
                                    '002606.SZ', '002607.SZ', '002608.SZ', '002609.SZ', '002610.SZ', '002611.SZ',
                                    '002612.SZ', '002614.SZ', '002617.SZ', '002621.SZ', '002623.SZ', '002624.SZ',
                                    '002625.SZ', '002626.SZ', '002627.SZ', '002631.SZ', '002632.SZ', '002634.SZ',
                                    '002635.SZ', '002636.SZ', '002637.SZ', '002639.SZ', '002640.SZ', '002641.SZ',
                                    '002642.SZ', '002643.SZ', '002644.SZ', '002645.SZ', '002646.SZ', '002647.SZ',
                                    '002648.SZ', '002649.SZ', '002650.SZ', '002651.SZ', '002653.SZ', '002654.SZ',
                                    '002655.SZ', '002657.SZ', '002661.SZ', '002662.SZ', '002664.SZ', '002665.SZ',
                                    '002667.SZ', '002668.SZ', '002669.SZ', '002670.SZ', '002672.SZ', '002673.SZ',
                                    '002674.SZ', '002675.SZ', '002677.SZ', '002678.SZ', '002681.SZ', '002683.SZ',
                                    '002688.SZ', '002689.SZ', '002690.SZ', '002695.SZ', '002697.SZ', '002698.SZ',
                                    '002701.SZ', '002703.SZ', '002705.SZ', '002706.SZ', '002707.SZ', '002712.SZ',
                                    '002716.SZ', '002717.SZ', '002721.SZ', '002723.SZ', '002724.SZ', '002726.SZ',
                                    '002727.SZ', '002728.SZ', '002729.SZ', '002731.SZ', '002733.SZ', '002734.SZ',
                                    '002737.SZ', '002739.SZ', '002741.SZ', '002745.SZ', '002746.SZ', '002747.SZ',
                                    '002749.SZ', '002750.SZ', '002752.SZ', '002755.SZ', '002757.SZ', '002759.SZ',
                                    '002761.SZ', '002765.SZ', '002766.SZ', '002768.SZ', '002772.SZ', '002773.SZ',
                                    '002777.SZ', '002782.SZ', '002785.SZ', '002788.SZ', '002792.SZ', '002793.SZ',
                                    '002797.SZ', '002801.SZ', '002803.SZ', '002805.SZ', '002810.SZ', '002813.SZ',
                                    '002815.SZ', '002818.SZ', '002819.SZ', '002824.SZ', '002827.SZ', '002829.SZ',
                                    '002831.SZ', '002832.SZ', '002833.SZ', '002837.SZ', '002838.SZ', '002840.SZ',
                                    '002843.SZ', '002845.SZ', '002851.SZ', '002852.SZ', '002858.SZ', '002859.SZ',
                                    '002866.SZ', '002867.SZ', '002868.SZ', '002869.SZ', '002870.SZ', '002873.SZ',
                                    '002876.SZ', '002878.SZ', '002880.SZ', '002881.SZ', '002882.SZ', '002884.SZ',
                                    '002885.SZ', '002891.SZ', '002895.SZ', '002896.SZ', '002897.SZ', '002901.SZ',
                                    '002905.SZ', '002906.SZ', '002907.SZ', '002908.SZ', '002911.SZ', '002912.SZ',
                                    '002913.SZ', '002915.SZ', '002918.SZ', '002919.SZ', '002922.SZ', '002923.SZ',
                                    '002925.SZ', '002926.SZ', '002928.SZ', '002929.SZ', '002930.SZ', '002935.SZ',
                                    '002937.SZ', '002939.SZ', '002940.SZ', '002941.SZ', '002945.SZ', '002946.SZ',
                                    '002947.SZ', '002950.SZ', '002951.SZ', '002955.SZ', '002956.SZ', '002957.SZ',
                                    '002960.SZ', '002961.SZ', '002965.SZ', '002967.SZ', '002968.SZ', '002975.SZ',
                                    '002978.SZ', '002979.SZ', '002980.SZ', '002984.SZ', '002985.SZ', '002986.SZ',
                                    '002987.SZ', '002993.SZ', '003000.SZ', '003006.SZ', '003012.SZ', '003022.SZ',
                                    '003029.SZ', '003035.SZ', '003040.SZ', '600004.SH', '600006.SH', '600007.SH',
                                    '600008.SH', '600012.SH', '600017.SH', '600020.SH', '600021.SH', '600026.SH',
                                    '600027.SH', '600033.SH', '600035.SH', '600037.SH', '600038.SH', '600052.SH',
                                    '600053.SH', '600054.SH', '600055.SH', '600056.SH', '600057.SH', '600058.SH',
                                    '600059.SH', '600060.SH', '600061.SH', '600062.SH', '600063.SH', '600064.SH',
                                    '600066.SH', '600067.SH', '600071.SH', '600072.SH', '600073.SH', '600075.SH',
                                    '600079.SH', '600081.SH', '600084.SH', '600088.SH', '600094.SH', '600095.SH',
                                    '600096.SH', '600098.SH', '600100.SH', '600101.SH', '600103.SH', '600105.SH',
                                    '600106.SH', '600108.SH', '600109.SH', '600110.SH', '600113.SH', '600114.SH',
                                    '600116.SH', '600117.SH', '600118.SH', '600120.SH', '600121.SH', '600123.SH',
                                    '600125.SH', '600126.SH', '600127.SH', '600129.SH', '600130.SH', '600131.SH',
                                    '600133.SH', '600135.SH', '600138.SH', '600141.SH', '600143.SH', '600151.SH',
                                    '600152.SH', '600153.SH', '600155.SH', '600158.SH', '600160.SH', '600161.SH',
                                    '600163.SH', '600166.SH', '600167.SH', '600168.SH', '600170.SH', '600171.SH',
                                    '600172.SH', '600173.SH', '600177.SH', '600179.SH', '600180.SH', '600183.SH',
                                    '600184.SH', '600185.SH', '600186.SH', '600187.SH', '600189.SH', '600190.SH',
                                    '600195.SH', '600197.SH', '600198.SH', '600199.SH', '600200.SH', '600201.SH',
                                    '600203.SH', '600206.SH', '600207.SH', '600208.SH', '600210.SH', '600212.SH',
                                    '600216.SH', '600217.SH', '600218.SH', '600219.SH', '600222.SH', '600223.SH',
                                    '600225.SH', '600227.SH', '600228.SH', '600229.SH', '600230.SH', '600236.SH',
                                    '600237.SH', '600238.SH', '600246.SH', '600248.SH', '600251.SH', '600252.SH',
                                    '600258.SH', '600259.SH', '600261.SH', '600266.SH', '600267.SH', '600268.SH',
                                    '600269.SH', '600271.SH', '600273.SH', '600277.SH', '600278.SH', '600279.SH',
                                    '600280.SH', '600282.SH', '600283.SH', '600284.SH', '600285.SH', '600288.SH',
                                    '600292.SH', '600293.SH', '600295.SH', '600298.SH', '600299.SH', '600300.SH',
                                    '600301.SH', '600305.SH', '600308.SH', '600310.SH', '600312.SH', '600313.SH',
                                    '600315.SH', '600316.SH', '600318.SH', '600320.SH', '600323.SH', '600325.SH',
                                    '600326.SH', '600327.SH', '600328.SH', '600329.SH', '600330.SH', '600331.SH',
                                    '600332.SH', '600335.SH', '600336.SH', '600337.SH', '600338.SH', '600339.SH',
                                    '600343.SH', '600345.SH', '600348.SH', '600350.SH', '600351.SH', '600352.SH',
                                    '600353.SH', '600354.SH', '600358.SH', '600359.SH', '600360.SH', '600362.SH',
                                    '600363.SH', '600366.SH', '600367.SH', '600368.SH', '600369.SH', '600370.SH',
                                    '600371.SH', '600373.SH', '600375.SH', '600376.SH', '600377.SH', '600378.SH',
                                    '600379.SH', '600380.SH', '600381.SH', '600383.SH', '600386.SH', '600389.SH',
                                    '600390.SH', '600391.SH', '600392.SH', '600395.SH', '600398.SH', '600399.SH',
                                    '600400.SH', '600403.SH', '600405.SH', '600409.SH', '600410.SH', '600415.SH',
                                    '600416.SH', '600418.SH', '600419.SH', '600420.SH', '600422.SH', '600425.SH',
                                    '600428.SH', '600429.SH', '600433.SH', '600435.SH', '600446.SH', '600449.SH',
                                    '600452.SH', '600456.SH', '600458.SH', '600459.SH', '600461.SH', '600468.SH',
                                    '600470.SH', '600475.SH', '600476.SH', '600477.SH', '600478.SH', '600479.SH',
                                    '600480.SH', '600481.SH', '600482.SH', '600483.SH', '600487.SH', '600488.SH',
                                    '600490.SH', '600491.SH', '600495.SH', '600496.SH', '600497.SH', '600498.SH',
                                    '600499.SH', '600500.SH', '600501.SH', '600502.SH', '600503.SH', '600507.SH',
                                    '600508.SH', '600509.SH', '600510.SH', '600511.SH', '600512.SH', '600513.SH',
                                    '600515.SH', '600516.SH', '600517.SH', '600521.SH', '600523.SH', '600525.SH',
                                    '600526.SH', '600528.SH', '600529.SH', '600531.SH', '600533.SH', '600535.SH',
                                    '600537.SH', '600545.SH', '600546.SH', '600548.SH', '600549.SH', '600550.SH',
                                    '600551.SH', '600552.SH', '600556.SH', '600557.SH', '600558.SH', '600559.SH',
                                    '600562.SH', '600566.SH', '600571.SH', '600572.SH', '600573.SH', '600576.SH',
                                    '600577.SH', '600578.SH', '600579.SH', '600580.SH', '600581.SH', '600582.SH',
                                    '600583.SH', '600586.SH', '600587.SH', '600590.SH', '600592.SH', '600594.SH',
                                    '600595.SH', '600596.SH', '600597.SH', '600598.SH', '600602.SH', '600603.SH',
                                    '600604.SH', '600605.SH', '600606.SH', '600609.SH', '600610.SH', '600611.SH',
                                    '600613.SH', '600616.SH', '600617.SH', '600618.SH', '600619.SH', '600620.SH',
                                    '600621.SH', '600622.SH', '600623.SH', '600624.SH', '600628.SH', '600629.SH',
                                    '600633.SH', '600635.SH', '600636.SH', '600637.SH', '600638.SH', '600639.SH',
                                    '600640.SH', '600641.SH', '600642.SH', '600643.SH', '600644.SH', '600645.SH',
                                    '600648.SH', '600649.SH', '600650.SH', '600651.SH', '600655.SH', '600657.SH',
                                    '600658.SH', '600662.SH', '600663.SH', '600664.SH', '600665.SH', '600667.SH',
                                    '600668.SH', '600673.SH', '600675.SH', '600676.SH', '600681.SH', '600682.SH',
                                    '600683.SH', '600685.SH', '600686.SH', '600688.SH', '600691.SH', '600693.SH',
                                    '600694.SH', '600696.SH', '600698.SH', '600699.SH', '600704.SH', '600705.SH',
                                    '600706.SH', '600707.SH', '600710.SH', '600711.SH', '600713.SH', '600715.SH',
                                    '600716.SH', '600717.SH', '600718.SH', '600720.SH', '600722.SH', '600724.SH',
                                    '600725.SH', '600728.SH', '600729.SH', '600730.SH', '600731.SH', '600732.SH',
                                    '600733.SH', '600736.SH', '600737.SH', '600738.SH', '600739.SH', '600740.SH',
                                    '600742.SH', '600744.SH', '600746.SH', '600748.SH', '600749.SH', '600750.SH',
                                    '600751.SH', '600755.SH', '600756.SH', '600757.SH', '600758.SH', '600761.SH',
                                    '600764.SH', '600765.SH', '600769.SH', '600770.SH', '600771.SH', '600773.SH',
                                    '600774.SH', '600775.SH', '600776.SH', '600777.SH', '600780.SH', '600782.SH',
                                    '600783.SH', '600784.SH', '600785.SH', '600787.SH', '600789.SH', '600790.SH',
                                    '600792.SH', '600794.SH', '600797.SH', '600798.SH', '600800.SH', '600801.SH',
                                    '600803.SH', '600805.SH', '600808.SH', '600810.SH', '600812.SH', '600814.SH',
                                    '600815.SH', '600818.SH', '600819.SH', '600820.SH', '600821.SH', '600822.SH',
                                    '600824.SH', '600825.SH', '600826.SH', '600827.SH', '600828.SH', '600829.SH',
                                    '600831.SH', '600834.SH', '600835.SH', '600836.SH', '600839.SH', '600841.SH',
                                    '600846.SH', '600848.SH', '600850.SH', '600851.SH', '600853.SH', '600855.SH',
                                    '600859.SH', '600860.SH', '600861.SH', '600862.SH', '600863.SH', '600864.SH',
                                    '600865.SH', '600866.SH', '600867.SH', '600868.SH', '600869.SH', '600872.SH',
                                    '600873.SH', '600874.SH', '600875.SH', '600876.SH', '600877.SH', '600879.SH',
                                    '600880.SH', '600882.SH', '600884.SH', '600885.SH', '600888.SH', '600892.SH',
                                    '600894.SH', '600895.SH', '600897.SH', '600901.SH', '600903.SH', '600906.SH',
                                    '600909.SH', '600916.SH', '600917.SH', '600918.SH', '600927.SH', '600929.SH',
                                    '600933.SH', '600935.SH', '600936.SH', '600938.SH', '600939.SH', '600955.SH',
                                    '600959.SH', '600960.SH', '600961.SH', '600962.SH', '600963.SH', '600965.SH',
                                    '600966.SH', '600967.SH', '600968.SH', '600970.SH', '600971.SH', '600973.SH',
                                    '600975.SH', '600977.SH', '600979.SH', '600981.SH', '600982.SH', '600983.SH',
                                    '600984.SH', '600985.SH', '600986.SH', '600987.SH', '600988.SH', '600990.SH',
                                    '600992.SH', '600993.SH', '600995.SH', '600996.SH', '600997.SH', '600998.SH',
                                    '601000.SH', '601001.SH', '601002.SH', '601003.SH', '601007.SH', '601008.SH',
                                    '601011.SH', '601015.SH', '601016.SH', '601019.SH', '601020.SH', '601028.SH',
                                    '601038.SH', '601058.SH', '601059.SH', '601068.SH', '601069.SH', '601098.SH',
                                    '601099.SH', '601101.SH', '601106.SH', '601107.SH', '601108.SH', '601113.SH',
                                    '601116.SH', '601118.SH', '601126.SH', '601127.SH', '601136.SH', '601137.SH',
                                    '601139.SH', '601155.SH', '601156.SH', '601158.SH', '601162.SH', '601163.SH',
                                    '601168.SH', '601177.SH', '601179.SH', '601188.SH', '601198.SH', '601199.SH',
                                    '601200.SH', '601208.SH', '601212.SH', '601216.SH', '601218.SH', '601222.SH',
                                    '601226.SH', '601228.SH', '601231.SH', '601233.SH', '601236.SH', '601298.SH',
                                    '601311.SH', '601326.SH', '601330.SH', '601339.SH', '601366.SH', '601368.SH',
                                    '601369.SH', '601375.SH', '601388.SH', '601399.SH', '601456.SH', '601500.SH',
                                    '601512.SH', '601515.SH', '601518.SH', '601519.SH', '601555.SH', '601566.SH',
                                    '601567.SH', '601568.SH', '601579.SH', '601595.SH', '601598.SH', '601599.SH',
                                    '601606.SH', '601607.SH', '601608.SH', '601609.SH', '601611.SH', '601615.SH',
                                    '601616.SH', '601619.SH', '601636.SH', '601666.SH', '601677.SH', '601678.SH',
                                    '601686.SH', '601696.SH', '601700.SH', '601702.SH', '601717.SH', '601718.SH',
                                    '601777.SH', '601778.SH', '601789.SH', '601801.SH', '601808.SH', '601811.SH',
                                    '601827.SH', '601828.SH', '601858.SH', '601866.SH', '601868.SH', '601869.SH',
                                    '601878.SH', '601882.SH', '601886.SH', '601890.SH', '601900.SH', '601908.SH',
                                    '601918.SH', '601921.SH', '601928.SH', '601933.SH', '601949.SH', '601952.SH',
                                    '601958.SH', '601965.SH', '601966.SH', '601968.SH', '601969.SH', '601975.SH',
                                    '601990.SH', '601991.SH', '601995.SH', '601999.SH', '603000.SH', '603002.SH',
                                    '603003.SH', '603005.SH', '603008.SH', '603010.SH', '603011.SH', '603012.SH',
                                    '603013.SH', '603015.SH', '603016.SH', '603018.SH', '603020.SH', '603025.SH',
                                    '603027.SH', '603028.SH', '603031.SH', '603033.SH', '603035.SH', '603043.SH',
                                    '603050.SH', '603053.SH', '603055.SH', '603056.SH', '603058.SH', '603060.SH',
                                    '603063.SH', '603066.SH', '603067.SH', '603068.SH', '603069.SH', '603071.SH',
                                    '603076.SH', '603077.SH', '603078.SH', '603081.SH', '603085.SH', '603086.SH',
                                    '603087.SH', '603088.SH', '603093.SH', '603096.SH', '603098.SH', '603100.SH',
                                    '603103.SH', '603105.SH', '603108.SH', '603109.SH', '603110.SH', '603111.SH',
                                    '603113.SH', '603115.SH', '603118.SH', '603123.SH', '603126.SH', '603128.SH',
                                    '603131.SH', '603136.SH', '603138.SH', '603156.SH', '603158.SH', '603165.SH',
                                    '603166.SH', '603167.SH', '603169.SH', '603171.SH', '603179.SH', '603180.SH',
                                    '603181.SH', '603186.SH', '603187.SH', '603189.SH', '603197.SH', '603199.SH',
                                    '603200.SH', '603203.SH', '603209.SH', '603212.SH', '603217.SH', '603218.SH',
                                    '603220.SH', '603222.SH', '603223.SH', '603225.SH', '603227.SH', '603228.SH',
                                    '603229.SH', '603232.SH', '603233.SH', '603239.SH', '603256.SH', '603258.SH',
                                    '603277.SH', '603279.SH', '603281.SH', '603298.SH', '603299.SH', '603300.SH',
                                    '603301.SH', '603303.SH', '603305.SH', '603306.SH', '603308.SH', '603309.SH',
                                    '603313.SH', '603315.SH', '603317.SH', '603319.SH', '603322.SH', '603327.SH',
                                    '603328.SH', '603330.SH', '603333.SH', '603337.SH', '603339.SH', '603348.SH',
                                    '603351.SH', '603355.SH', '603357.SH', '603358.SH', '603359.SH', '603360.SH',
                                    '603363.SH', '603365.SH', '603366.SH', '603367.SH', '603368.SH', '603377.SH',
                                    '603378.SH', '603379.SH', '603380.SH', '603385.SH', '603386.SH', '603387.SH',
                                    '603393.SH', '603398.SH', '603399.SH', '603416.SH', '603421.SH', '603429.SH',
                                    '603456.SH', '603458.SH', '603466.SH', '603477.SH', '603496.SH', '603505.SH',
                                    '603507.SH', '603508.SH', '603515.SH', '603516.SH', '603517.SH', '603518.SH',
                                    '603519.SH', '603520.SH', '603527.SH', '603528.SH', '603530.SH', '603533.SH',
                                    '603535.SH', '603538.SH', '603551.SH', '603555.SH', '603556.SH', '603558.SH',
                                    '603565.SH', '603566.SH', '603567.SH', '603568.SH', '603569.SH', '603579.SH',
                                    '603583.SH', '603585.SH', '603587.SH', '603588.SH', '603590.SH', '603595.SH',
                                    '603599.SH', '603601.SH', '603606.SH', '603609.SH', '603611.SH', '603612.SH',
                                    '603617.SH', '603618.SH', '603619.SH', '603626.SH', '603628.SH', '603629.SH',
                                    '603630.SH', '603633.SH', '603636.SH', '603638.SH', '603639.SH', '603648.SH',
                                    '603650.SH', '603655.SH', '603660.SH', '603661.SH', '603662.SH', '603663.SH',
                                    '603665.SH', '603666.SH', '603667.SH', '603668.SH', '603669.SH', '603676.SH',
                                    '603678.SH', '603680.SH', '603681.SH', '603686.SH', '603687.SH', '603689.SH',
                                    '603690.SH', '603693.SH', '603697.SH', '603698.SH', '603699.SH', '603701.SH',
                                    '603703.SH', '603707.SH', '603708.SH', '603711.SH', '603712.SH', '603718.SH',
                                    '603719.SH', '603727.SH', '603728.SH', '603730.SH', '603733.SH', '603738.SH',
                                    '603739.SH', '603755.SH', '603757.SH', '603758.SH', '603766.SH', '603773.SH',
                                    '603776.SH', '603777.SH', '603778.SH', '603787.SH', '603797.SH', '603800.SH',
                                    '603801.SH', '603803.SH', '603808.SH', '603809.SH', '603811.SH', '603815.SH',
                                    '603816.SH', '603817.SH', '603818.SH', '603819.SH', '603823.SH', '603825.SH',
                                    '603848.SH', '603855.SH', '603856.SH', '603858.SH', '603859.SH', '603861.SH',
                                    '603863.SH', '603866.SH', '603867.SH', '603869.SH', '603871.SH', '603876.SH',
                                    '603877.SH', '603878.SH', '603881.SH', '603883.SH', '603885.SH', '603886.SH',
                                    '603887.SH', '603888.SH', '603889.SH', '603890.SH', '603896.SH', '603897.SH',
                                    '603898.SH', '603899.SH', '603901.SH', '603906.SH', '603909.SH', '603912.SH',
                                    '603915.SH', '603916.SH', '603917.SH', '603918.SH', '603919.SH', '603920.SH',
                                    '603927.SH', '603929.SH', '603931.SH', '603936.SH', '603938.SH', '603948.SH',
                                    '603949.SH', '603956.SH', '603959.SH', '603960.SH', '603966.SH', '603967.SH',
                                    '603968.SH', '603969.SH', '603970.SH', '603977.SH', '603979.SH', '603980.SH',
                                    '603983.SH', '603985.SH', '603987.SH', '603989.SH', '603990.SH', '603992.SH',
                                    '603995.SH', '603997.SH', '603998.SH', '603999.SH', '605008.SH', '605020.SH',
                                    '605077.SH', '605090.SH', '605136.SH', '605305.SH', '605366.SH', '605376.SH',
                                    '605377.SH', '605507.SH', '605589.SH', '605599.SH']
    # fromXls(r'D:\gupiao\全盘票票 2023-04-20.xls')
    # ['002292.SZ', '000651.SZ', '002712.SZ', '600030.SH', '002558.SZ', '603169.SH',
    #                             '002197.SZ', '601377.SH', '002343.SZ', '002280.SZ', '000725.SZ', '001330.SZ',
    #                             '601928.SH', '601136.SH', '600977.SH', '002739.SZ', '002425.SZ', '600732.SH',
    #                             '600435.SH', '002315.SZ', '000688.SZ', '002864.SZ', '603163.SH', '002291.SZ',
    #                             '601702.SH', '000978.SZ', '601007.SH', '603199.SH', '600138.SH', '002429.SZ',
    #                             '605081.SH', '000430.SZ', '002306.SZ', '600750.SH', '600358.SH', '600771.SH',
    #                             '603063.SH', '601058.SH', '000963.SZ', '600038.SH', '002970.SZ', '603170.SH',
    #                             '000686.SZ', '600511.SH', '002773.SZ', '605186.SH', '002299.SZ', '600610.SH',
    #                             '603235.SH', '600998.SH', '002262.SZ', '603733.SH', '600774.SH']
    ContextInfo.monitor = {}
    ContextInfo.set_universe(ContextInfo.sector_code_list)  # 设定股票池，后面再获取比如历史收盘价时会用到

    """
    具体初始化逻辑
    包含文件路径的创建、存量信息加载等
    """
    logging.warning(f'目标股票: {ContextInfo.sector_code_list}')
    if not os.path.exists(ContextInfo.stocksPath):
        os.mkdir(ContextInfo.stocksPath)
    else:
        # 如果文件夹已经存在，则将已经落地的数据进行读取
        init_inventory(ContextInfo)
    logging.info('初始化阶段完成，准备进入tick阶段.')


def handlebar(ContextInfo):
    logging.debug('tick~')
    if not ContextInfo.is_last_bar():
        return
    persistence_scv(ContextInfo)  # 将当前tick信息写入本地

    monitor_attack(ContextInfo, ContextInfo.sector_code_list)  # 将当前tick计算入总的资金列表中

    SMADict = SMA_moving_up(ContextInfo, 2, 5)

    for code, dataDict in ContextInfo.recorderMap.items():
        if 4.0 < dataDict['IncreaseRate'] < 7.0:
            offentotal = dataDict['offentotal']
            if SMADict[code]['goUp']:
                final_capital = dataDict['capitalization'] * ContextInfo.capitalRate
                if dataDict['offentotal'] > final_capital:
                    logging.info(
                        f"股票编码: {code}达到购买要求。当前进攻资金: {offentotal}; 两天五日均线为: {SMADict[code]['Ave']}; 股价涨幅: {dataDict['IncreaseRate']}")
                    if myPassOrder(ContextInfo, code):
                        # stop 结束策略
                        return
                else:
                    logging.debug(
                        f"股票编码: {code} 因进攻净值未达标不符合买入要求。 主力进攻资金: {dataDict['offentotal']}, 流通股价比例值：{final_capital}， 流通股价原值: {dataDict['capitalization']}, 流通股价比例: {ContextInfo.capitalRate}")
            else:
                logging.debug(f"股票编码: {code} 因五日均线问题不符合买入要求，五日均线分别为: {SMADict[code]}")
        else:
            logging.debug(f"股票编码: {code} 因股价涨幅问题不符合买入要求，股价涨幅: {dataDict['IncreaseRate']}")
        logging.debug(f"股票编码{code}交易统计详情: {dataDict}")


def myPassOrder(ContextInfo, orderCode):
    """
    综合交易下单
    passorder(opType, orderType, accountid, orderCode, prType, modelprice, volume[, strategyName, quickTrade, userOrderId], ContextInfo)

    opType，操作类型，可选值：
        股票买卖：
            23：股票买入，或沪港通、深港通股票买入
            24：股票卖出，或沪港通、深港通股票卖出
    orderType，下单方式
        对所有账号组的操作相当于对账号组里的每个账号做一样的操作，
            如 passorder(23, 1202, ‘testS’, ‘000001.SZ’, 5, -1, 50000, ContextInfo)，
            意思就是对账号组 testS 里的所有账号都以最新价开仓买入 50000 元市值的 000001.SZ 平安银行；

            如 passorder(60,1101,”test”,’510050.SH’,5,-1,1,ContextInfo)
            意思就是账号test申购1个单位(900000股)的华夏上证50ETF(只申购不买入成分股)。

        可选值：
            1101：单股、单账号、普通、股/手方式下单
            1102：单股、单账号、普通、金额（元）方式下单（只支持股票）
            1113：单股、单账号、总资产、比例 [0 ~ 1] 方式下单
            1123：单股、单账号、可用、比例[0 ~ 1]方式下单
            1201：单股、账号组（无权重）、普通、股/手方式下单
            1202：单股、账号组（无权重）、普通、金额（元）方式下单（只支持股票）
            1213：单股、账号组（无权重）、总资产、比例 [0 ~ 1] 方式下单
            1223：单股、账号组（无权重）、可用、比例 [0 ~ 1] 方式下单
            2101：组合、单账号、普通、按组合股票数量（篮子中股票设定的数量）方式下单 > 对应 volume 的单位为篮子的份
            2102：组合、单账号、普通、按组合股票权重（篮子中股票设定的权重）方式下单 > 对应 volume 的单位为元
            2103：组合、单账号、普通、按账号可用方式下单 > （底层篮子股票怎么分配？答：按可用资金比例后按篮子中股票权重分配，如用户没填权重则按相等权重分配）只对股票篮子支持
            2201：组合、账号组（无权重）、普通、按组合股票数量方式下单
            2202：组合、账号组（无权重）、普通、按组合股票权重方式下单
            2203：组合、账号组（无权重）、普通、按账号可用方式下单只对股票篮子支持
    accountID，资金账号
        *注：下单的账号ID（可多个）或账号组名或套利组名（一个篮子一个套利账号，如 accountID = ‘股票账户名, 期货账号’）
    orderCode，下单代码
        *注：
            一、如果是单股或单期货、港股，则该参数填合约代码；
            二、如果是组合交易,则该参数填篮子名称；
            三、如果是组合套利，则填一个篮子名和一个期货合约名（如orderCode = ‘篮子名, 期货合约名’）
    prType，下单选价类型
        *注意：回测时，除了指定价，其他下单选价类型均以当期k线收盘价结算。
        -1：无效（实际下单时,需要用交易面板交易函数那设定的选价类型）
        0：卖5价
        1：卖4价
        2：卖3价
        3：卖2价
        4：卖1价
        5：最新价
        6：买1价
        7：买2价（组合不支持）
        8：买3价（组合不支持）
        9：买4价（组合不支持）
        10：买5价（组合不支持）
        11：（指定价）模型价（只对单股情况支持,对组合交易不支持）
        12：涨跌停价
        13：挂单价
        14：对手价
        27：市价即成剩撤(仅对股票期权申报有效)
        28：市价即全成否则撤(仅对股票期权申报有效)
        29：市价剩转限价(仅对股票期权申报有效)
        42：最优五档即时成交剩余撤销申报(仅对上交所申报有效)
        43：最优五档即时成交剩转限价申报(仅对上交所申报有效)
        44：对手方最优价格委托(仅对深交所申报有效)
        45：本方最优价格委托(仅对深交所申报有效)
        46：即时成交剩余撤销委托(仅对深交所申报有效)
        47：最优五档即时成交剩余撤销委托(仅对深交所申报有效)
        48：全额成交或撤销委托(仅对深交所申报有效)
        49：科创板盘后定价
    price，下单价格
        *注：
            一、单股下单时，prType 是模型价/科创板盘后定价时 price 有效；
                其它情况无效；
                即单股时， prType 参数为 11，49 时被使用。
                prType 参数不为 11，49 时也需填写，填写的内容可为 -1，0，2，100 等任意数字；
            二、组合下单时，是组合套利时，price 作套利比例有效，其它情况无效。
    volume，下单数量（股 / 手 / 元 / %）
        根据 orderType 值最后一位确定 volume 的单位：
        单股下单时：
            1：股 / 手
            2：金额（元）
            3：比例（%）
        组合下单时：
            1：按组合股票数量（份）
            2：按组合股票权重（元）
            3：按账号可用（%）

    passorder(opType, orderType, accountid, orderCode, prType, modelprice, volume[, strategyName, quickTrade, userOrderId], ContextInfo)

    strategyName，string，自定义策略名，可缺省不写，用来区分 order 委托和 deal 成交来自不同的策略。
        根据该策略名，get_trade_detail_data，get_last_order_id 函数可以获取相应策略名对应的委托或持仓结果。
        *注：strategyName 只对同账号本地客户端有效，即 strategyName 只对当前客户端下的单进行策略区分，且该策略区分只能当前客户端使用。

    quickTrade，int，设定是否立即触发下单（回测时无效），可选值：
        0：否
        1：是
        *注：passorder是对最后一根K线完全走完后生成的模型信号在下一根K线的第一个tick数据来时触发下单交易；
        采用quickTrade参数设置为1时，非历史bar上执行时（ContextInfo.is_last_bar()为True），只要策略模型中调用到就触发下单交易。
        quickTrade参数设置为2时，不判断bar状态，只要策略模型中调用到就触发下单交易，历史bar上也能触发下单，请谨慎使用。

    userOrderId，string，用户自设委托 ID，可缺省不写，写的时候必须把起前面的 strategyName 和 quickTrade 参数也填写。
        对应 order 委托对象和 deal 成交对象中的 m_strRemark 属性，通过 get_trade_detail_data 函数或委托主推函数 order_callback 和成交主推函数 deal_callback 可拿到这两个对象信息。
    """
    # passorder(opType, orderType, accountid, orderCode, prType, modelprice, volume[, strategyName, quickTrade, userOrderId], ContextInfo)
    passorder(opType=23,
              orderType=1123,
              accountid=ContextInfo.account,
              orderCode=orderCode,
              prType=ContextInfo.prType,
              price=0.00,
              volume=ContextInfo.modelPrice,
              strategyName='',
              quickTrade=1,
              userOrderId='',
              ContextInfo=ContextInfo)
    logging.warning(f'针对股票{orderCode} 下单发起完成!')
    return True


def fromXls(path):
    workbook = xlrd.open_workbook(path)
    worksheet = workbook.sheet_by_index(0)
    col_data = worksheet.col_values(0)
    result = []
    for value in col_data:
        if value == '股票代码':
            continue
        result.append(value)
    return result


# 均线计算
# @param countDay: 最终需要判断多少天的上移，最少2天
# @param aveDay: 计算均线时统计几天
def SMA_moving_up(ContextInfo, countDay: int, aveDay: int) -> dict:
    if countDay < 2 or aveDay < 1:
        return
    # get_history_data接口版本较老，推荐使用get_market_data_ex替代，配合download_history_data补充昨日以前的历史数据
    hisdict = ContextInfo.get_history_data(aveDay + countDay - 1, '1d', 'close')
    result = {}
    for code, pricesList in hisdict.items():
        goUp = True
        curAveList = []
        # logging.debug(f'pricesList: {pricesList}')
        for index in range(countDay):
            # logging.debug(f'sum: {pricesList[index:aveDay + index]}')
            curAveList.append(sum(pricesList[index:aveDay + index]) / aveDay)
            if index > 0:
                if curAveList[index] - curAveList[index - 1] < 0:
                    # 更新一期5日均线低于前一天，说明不是一直上涨
                    goUp = False
        result[code] = {'Ave': curAveList, 'goUp': goUp}
    return result


# 通过读取记录，计算得到
def monitor_attack(ContextInfo, codeList: list):
    logging.debug('开始解析tick消息')
    # 推动价格上涨的，成交额，50万以上的，算进攻资金
    # volume:成交总量（手）; pvolume:成交总量（股）
    # logging.info(f'codeList:{codeList}')
    fullTick = ContextInfo.get_full_tick(stock_code=codeList)
    logging.debug(f'fullTick: {fullTick}')

    for code, valDic in fullTick.items():
        if code not in ContextInfo.recorderMap:
            # 如果针对当前股票没有记录，则初始化一个写入内存
            valDic['offensive'] = 0.0
            valDic['offentotal'] = 0.0  # 主力进攻资金
            valDic['recorder'] = []
            valDic['mainPush'] = 0.0  # 主力打压资金
            valDic['pureAttack'] = 0.0  # 主力进攻净值 = 主力进攻金额 - 主力打压资金
            valDic['capitalization'] = 0.0  # 流通市值 = 股票价格 * 流通股本
            valDic['IncreaseRate'] = 0.0  # 涨幅 %
            ContextInfo.recorderMap[code] = valDic.copy()
            continue
        else:
            curMap = ContextInfo.recorderMap[code]
            lastPriceOld = float(curMap['lastPrice'])
            amountOld = float(curMap['amount'])

            lastPriceNew = float(valDic['lastPrice'])
            amountNew = float(valDic['amount'])

            amountChange = amountNew - amountOld
            negtive = None  # 最近一次价格涨跌，默认为None, 为None则不记录
            if amountChange < ContextInfo.bigAttack:
                # 非主力资金不统计
                continue

            if lastPriceNew == lastPriceOld and negtive is not None:
                if negtive:
                    curMap['mainPush'] += amountChange
                    curMap['recorder'].append({'timetag': curMap['timetag'], 'mainPush': curMap['mainPush'],
                                               'reason': 'More than 3 hundred thousand'})
                else:
                    # 股价没变的前提下，如果交易量达到30万，则统计本次交易量
                    curMap['offensive'] = amountChange
                    curMap['offentotal'] += amountChange
                    curMap['recorder'].append(
                        {'timetag': valDic['timetag'], 'offensive': amountChange, 'offentotal': curMap['offentotal'],
                         'reason': 'More than 3 hundred thousand'})
            elif lastPriceNew > lastPriceOld:
                # 推动股价上涨的交易直接记录
                curMap['offensive'] = amountChange
                curMap['offentotal'] += amountChange
                negtive = False
                curMap['recorder'].append(
                    {'timetag': valDic['timetag'], 'offensive': amountChange, 'offentotal': curMap['offentotal'],
                     'reason': 'Price go up'})
            elif lastPriceNew < lastPriceOld:
                curMap['mainPush'] += amountChange
                negtive = True
                curMap['recorder'].append(
                    {'timetag': curMap['timetag'], 'mainPush': curMap['mainPush'], 'reason': 'Price go down'})
            if negtive is not None:
                curMap['pureAttack'] = curMap['offentotal'] - curMap['mainPush']  # 记录当前主力进攻净值
                curMap['capitalization'] = valDic['lastPrice'] * ContextInfo.get_last_volume(code)  # 流通市值计算
                curMap['IncreaseRate'] = (valDic['lastPrice'] - valDic['lastClose']) / valDic['lastClose'] * 100  # 股价涨幅

            # 普通量同步
            curMap['timetag'] = valDic['timetag']
            curMap['lastPrice'] = valDic['lastPrice']
            curMap['open'] = valDic['open']
            curMap['high'] = valDic['high']
            curMap['low'] = valDic['low']
            curMap['lastClose'] = valDic['lastClose']
            curMap['amount'] = valDic['amount']
            curMap['volume'] = valDic['volume']
            curMap['pvolume'] = valDic['pvolume']
    logging.debug(f'recorderMap: {ContextInfo.recorderMap}')


# 数据持久化入scv文档
def persistence_scv(ContextInfo):
    logging.debug(f'持久化当前tick')
    fullTick = ContextInfo.get_full_tick(stock_code=ContextInfo.sector_code_list)
    for code, valDic in fullTick.items():
        filePath = ContextInfo.stocksPath + os.sep + code + '.csv'
        if not os.path.exists(filePath):
            # 文件不存在则初始化一个
            initCsvFile(filePath)
        else:
            with open(filePath) as f:
                s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
                # logging.info(f"数据源:{s} \r\n 查找对象:{bytes(valDic['timetag'], 'utf-8')} \r\n 查找结果: {s.find(bytes(valDic['timetag'], 'utf-8'))}")
                if s.find(bytes(valDic['timetag'], 'utf-8')) != -1:
                    continue
        datas = packageDatas(valDic)  # 打包好数据，用于后续直接写入
        file = open(filePath, 'a')  # 只写方式打开，往里添加数据
        file.write(datas + '\n')
        file.close()


def packageDatas(valDic: dict):
    # 将一tick数据打包成可以直接写入文件的字符串各式
    recorderList = []
    recorderList.append(valDic['timetag'])
    recorderList.append(valDic['lastPrice'])  # 最新价
    recorderList.append(valDic['open'])  # 开盘价
    recorderList.append(valDic['high'])  # 最高价
    recorderList.append(valDic['low'])  # 最低价
    recorderList.append(valDic['lastClose'])  # 收盘价
    recorderList.append(valDic['amount'])  # 成交额
    recorderList.append(valDic['volume'])  # 成交总量（手）
    recorderList.append(valDic['pvolume'])  # 成交总量（股）
    recorderList.append(valDic['stockStatus'])  # 股票状态
    recorderList.append(valDic['openInt'])  # 持仓量
    recorderList.append(valDic['settlementPrice'])  # 结算价
    recorderList.append(valDic['lastSettlementPrice'])  # 最新结算价
    recorderList.append('"' + str(valDic['askPrice']) + '"')  # 列表,卖价五档
    recorderList.append('"' + str(valDic['bidPrice']) + '"')  # 列表,买价五档
    recorderList.append('"' + str(valDic['askVol']) + '"')  # 列表,卖量五档
    recorderList.append('"' + str(valDic['bidVol']) + '"')  # 列表,买量五档
    return ','.join(str(i) for i in recorderList)


def initCsvFile(filePath: str):
    # 初始化文件，建立并创建表头
    initFile = open(filePath, 'w+')
    initFile.write(
        'timetag,lastPrice,open,high,low,lastClose,amount,volume,pvolume,stockStatus,openInt,settlementPrice,lastSettlementPrice,askPrice,bidPrice,askVol,bidVol\n')
    initFile.close()


def init_inventory(ContextInfo):
    # 读取已经保存本地的文件， 将数据加载到内存
    recorderMap = {}

    files = os.listdir(ContextInfo.stocksPath)
    for file in files:
        logging.debug(f'当前执行文件:{file}')
        if not file.endswith('csv'):
            logging.debug(f'非法文件，跳过：{file}')
            continue
        code = file[:-4]  # '剔除掉尾缀：.csv'
        loadedFile = open(ContextInfo.stocksPath + os.sep + file, 'r')
        _ = loadedFile.readline()  # 表头跳过
        curLine = loadedFile.readline().split(',')
        negtive = None  # 判断最近一次交易是涨是跌； 初始为None，为None时直接跳过当前记录
        while curLine and len(curLine) > 1:
            curMap = {}
            if code not in recorderMap:
                # 第一次加载，初始化第一行数据
                curMap['offensive'] = 0.0
                curMap['offentotal'] = 0.0  # 主力进攻金额
                curMap['recorder'] = []
                curMap['mainPush'] = 0.0  # 主力打压资金
                curMap['pureAttack'] = 0.0  # 主力进攻净值 = 主力进攻金额 - 主力打压资金
                curMap['capitalization'] = 0.0  # 流通市值 = 股票价格 * 流通股本
                curMap['IncreaseRate'] = 0.0  # 涨幅 %
                # 例行更新
                normalDatas(curMap, curLine)
                recorderMap[code] = curMap
            else:
                curMap = recorderMap[code]
                amountNew = float(curLine[6])
                amountOld = float(curMap['amount'])
                amountChange = amountNew - amountOld  # 成交额总量变化，计算出当前tick所产生的交易额
                if amountChange < ContextInfo.bigAttack:
                    # 单次交易额小于30万的直接忽略，不记录
                    # 下一行
                    curLine = loadedFile.readline().split(',')
                    continue

                lastPriceOld = float(curMap['lastPrice'])
                lastPriceNew = float(curLine[1])

                lastClose = float(curLine[5])
                if lastPriceNew == lastPriceOld and negtive is not None:
                    # 当价格没有变动时，判断金额是否足够大
                    # logging.debug(
                    #    f"time:{curLine[0]}, upAmount:{amountChange}, curAmount:{curMap['offentotal'] + amountChange}")
                    if negtive:
                        # 当资金足够大时，股价下跌，那就是主力逃跑，需要记录
                        curMap['mainPush'] += amountChange
                        curMap['recorder'].append({'timetag': curLine[0], 'mainPush': curMap['mainPush'],
                                                   'reason': 'More than 3 hundred thousand'})
                    else:
                        curMap['offensive'] = amountChange  # 记录本次进攻资金
                        curMap['offentotal'] += amountChange  # 将本次进攻资金纳入总量
                        curMap['recorder'].append(
                            {'timetag': curLine[0], 'offensive': amountChange, 'offentotal': curMap['offentotal'],
                             'reason': 'More than 3 hundred thousand'})
                elif lastPriceNew > lastPriceOld:
                    # logging.debug(f"time:{curLine[0]}, upAmount:{amountChange}, curAmount:{curMap['offentotal'] + amountChange}")
                    # 当前tick价格已经高于前一次价格，股价上涨，记录本次进攻资金
                    curMap['offensive'] = amountChange  # 记录本次进攻资金
                    curMap['offentotal'] += amountChange  # 将本次进攻资金纳入总量
                    negtive = False
                    curMap['recorder'].append(
                        {'timetag': curLine[0], 'offensive': amountChange, 'offentotal': curMap['offentotal'],
                         'reason': 'Price go up'})
                elif lastPriceNew < lastPriceOld:
                    curMap['mainPush'] += amountChange
                    negtive = True
                    curMap['recorder'].append(
                        {'timetag': curLine[0], 'mainPush': curMap['mainPush'], 'reason': 'Price go down'})
                if negtive is not None:
                    curMap['pureAttack'] = curMap['offentotal'] - curMap['mainPush']
                    curMap['capitalization'] = lastPriceNew * ContextInfo.get_last_volume(code)  # 流通市值计算
                    curMap['IncreaseRate'] = (lastPriceNew - lastClose) / lastClose * 100  # 股价涨幅

                # 例行更新
                normalDatas(curMap, curLine)
            # 下一行
            curLine = loadedFile.readline().split(',')
    ContextInfo.recorderMap = recorderMap


def normalDatas(curMap, curLine):
    curMap['timetag'] = curLine[0]
    curMap['lastPrice'] = float(curLine[1])
    curMap['open'] = float(curLine[2])
    curMap['high'] = float(curLine[3])
    curMap['low'] = float(curLine[4])
    curMap['lastClose'] = float(curLine[5])
    curMap['amount'] = float(curLine[6])
    curMap['volume'] = float(curLine[7])
    curMap['pvolume'] = float(curLine[8])


class ContextInfoMyself():
    def __init__(self):
        self.fulltick = {}
        self.code_list = []
        self.last_volume = []

    @property
    def universe(self):
        return self._universe

    @universe.setter
    def universe(self, codeList):
        self._universe = codeList.copy()

    def set_universe(self, codeList):
        self._universe = codeList

    def get_full_tick(self, stock_code):
        if len(self.fulltick) < 1:
            with open('fulltick.json') as file:
                self.fulltick = json.load(file)
        return self.fulltick

    def get_last_volume(self, code):
        if len(self.last_volume) < 1:
            with open('lastVolumeDatas.json') as file:
                self.last_volume = json.load(file)
        return self.last_volume[code]

    def is_last_bar(self):
        return True

    def set_universe(self, codeList):
        self.code_list = codeList.copy()

    def get_history_data(self, number, b, c):
        result = {}
        the_list = [index for index in range(number)]
        for code in self.code_list:
            result[code] = the_list
        return result

    def set_slippage(self, type, value):
        return

def passorder(opType, orderType, accountid, orderCode, prType, modelprice, volume, strategyName, quickTrade, userOrderId, ContextInfo):
    logging.info(f'针对{orderCode} 下单操作')


if __name__ == '__main__':
    c = ContextInfoMyself()
    init(c)
    handlebar(c)










